<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>c0</string>
		<string>c1</string>
	</array>
	<key>information_for_contributors</key>
	<array>
		<string>This code was auto generated by a much-more-readble ruby file</string>
		<string>This file essentially an updated/improved fork of the atom syntax</string>
		<string>see https://github.com/jeff-hykin/cpp-textmate-grammar/blob/master</string>
	</array>
	<key>name</key>
	<string>C0</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>#use</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control</string>
				</dict>
			</dict>
			<key>end</key>
			<string>($
?)</string>
			<key>name</key>
			<string>keyword.other.library</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>([ 	]*/[*]@[ ]*(ensures|requires|loop_invariant|assert))</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>comment.block</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment.block.contract</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.contract</string>
				</dict>
			</dict>
			<key>end</key>
			<string>[ 	]*((@[*]/))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.end</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>comment.block.contract</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.contract.block</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>@</string>
					<key>name</key>
					<string>comment.block.contract</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#contract_innards</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block_innards</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>@</string>
			<key>name</key>
			<string>comment.block.contract</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>([ 	]*//@[ ]*(ensures|requires|loop_invariant|assert))</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>comment.line</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment.line.contract</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.contract</string>
				</dict>
			</dict>
			<key>end</key>
			<string>($[;]?[
]?)</string>
			<key>name</key>
			<string>meta.contract.line</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(;\
)</string>
					<key>name:</key>
					<string>punctuation.separator.continuation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#contract_innards</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block_innards</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\\result</string>
			<key>name</key>
			<string>comment.result</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\\length</string>
			<key>name</key>
			<string>comment.length</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(struct)\s([.]*\s*){</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(};)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block_innards</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(break|continue|do|else|for|if|return|while|alloc|alloc_array|assert)\b</string>
			<key>name</key>
			<string>keyword.control</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#storage_types</string>
		</dict>
		<dict>
			<key>match</key>
			<string>typedef</string>
			<key>name</key>
			<string>keyword.other.typedef</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\bk[A-Z]\w*\b</string>
			<key>name</key>
			<string>constant.other.variable.mac-classic</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\bg[A-Z]\w*\b</string>
			<key>name</key>
			<string>variable.other.readwrite.global.mac-classic</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\bs[A-Z]\w*\b</string>
			<key>name</key>
			<string>variable.other.readwrite.static.mac-classic</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(NULL|true|false)\b</string>
			<key>name</key>
			<string>constant.language</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#operators</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#numbers</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#strings</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#block</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#parens</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\w)(?!\s*(?:while|for|do|if|else|return|break|continue|void|char|string|int|bool|alloc|alloc_array|assert)\s*\()(?=[a-zA-Z_]\w*\s*\()</string>
			<key>end</key>
			<string>(?&lt;=\))</string>
			<key>name</key>
			<string>meta.function</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-innards</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#line_continuation_character</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\[[ ]*\]</string>
			<key>name</key>
			<string>storage.modifier.array.bracket.square</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>([a-zA-Z_][a-zA-Z_0-9]*|(?&lt;=[\]\)]))?(\[)(?!\])</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.object</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.begin.bracket.square</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.end.bracket.square</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.bracket.square.access</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-call-innards</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>;</string>
			<key>name</key>
			<string>punctuation.terminator.statement</string>
		</dict>
		<dict>
			<key>match</key>
			<string>,</string>
			<key>name</key>
			<string>punctuation.separator.delimiter</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>access-method</key>
		<dict>
			<key>begin</key>
			<string>([a-zA-Z_][a-zA-Z_0-9]*|(?&lt;=[\]\)]))\s*(?:(\.)|(-&gt;))((?:(?:[a-zA-Z_][a-zA-Z_0-9]*)\s*(?:(?:\.)|(?:-&gt;)))*)\s*([a-zA-Z_][a-zA-Z_0-9]*)(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.object</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.dot-access</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.pointer-access</string>
				</dict>
				<key>4</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\.</string>
							<key>name</key>
							<string>punctuation.separator.dot-access</string>
						</dict>
						<dict>
							<key>match</key>
							<string>-&gt;</string>
							<key>name</key>
							<string>punctuation.separator.pointer-access</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[a-zA-Z_][a-zA-Z_0-9]*</string>
							<key>name</key>
							<string>variable.object</string>
						</dict>
						<dict>
							<key>match</key>
							<string>.+</string>
							<key>name</key>
							<string>everything.else</string>
						</dict>
					</array>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.member</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.arguments.begin.bracket.round.function.member</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.arguments.end.bracket.round.function.member</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function-call.member</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-call-innards</string>
				</dict>
			</array>
		</dict>
		<key>backslash_escapes</key>
		<dict>
			<key>match</key>
			<string>(?x)\\ (
\\			 |
[abefnprtv'"?]   |
[0-3]\d{,2}	 |
[4-7]\d?		|
x[a-fA-F0-9]{,2} |
u[a-fA-F0-9]{,4} |
U[a-fA-F0-9]{,8} )</string>
			<key>name</key>
			<string>constant.character.escape</string>
		</dict>
		<key>block</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.block.begin.bracket.curly</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}|(?=\s*#\s*(?:else)\b)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.block.end.bracket.curly</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#block_innards</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>block_innards</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#method_access</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#member_access</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#c_function_call</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
(?:
  (?:
	(?=\s)(?&lt;!else|new|return)
	(?&lt;=\w) \s+(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)  # or word + space before name
  )
)
(
  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name
  |
  (?:(?&lt;=operator) (?:[-*&amp;&lt;&gt;=+!]+ | \(\) | \[\]))
)
\s*(\() # opening bracket</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.parens.begin.bracket.round.initialization</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.parens.end.bracket.round.initialization</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.initialization</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-call-innards</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.block.begin.bracket.curly</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}|(?=\s*#\s*(?:else)\b)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.block.end.bracket.curly</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#block_innards</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#parens-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>c_conditional_context</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block_innards</string>
				</dict>
			</array>
		</dict>
		<key>c_function_call</key>
		<dict>
			<key>begin</key>
			<string>(?x)
(?!(?:while|for|do|if|else|return|alloc|alloc_array|assert)\s*\()
(?=
(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\s*\(  # actual name
|
(?:(?&lt;=operator)(?:[-*&amp;&lt;&gt;=+!]+|\(\)|\[\]))\s*\(
)</string>
			<key>end</key>
			<string>(?&lt;=\))(?!\w)</string>
			<key>name</key>
			<string>meta.function-call</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-call-innards</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\/\/[!\/]+)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.documentation</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.line.documentation</string>
					<key>while</key>
					<string>(?-mix:(?:^)(?&gt;\s*)(\/\/[!\/]+))</string>
					<key>whileCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.continuation.documentation</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.documentation</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.documentation</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\/\*[!*]+(?=\s))(.+)([!*]*\*\/)</string>
					<key>name</key>
					<string>comment.block.documentation</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\/\*[!*]+(?:(?:\n|$)|(?=\s)))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.documentation</string>
						</dict>
					</dict>
					<key>end</key>
					<string>([!*]*\*\/)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.documentation</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.documentation</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>while</key>
							<string>(?-mix:(?:^)(?&gt;\s*)(?![!*]*\*\/)((?&gt;\**)))</string>
							<key>whileCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.continuation.documentation</string>
								</dict>
							</dict>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.block</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^\/\* =(\s*.*?)\s*= \*\/$\n?</string>
					<key>name</key>
					<string>comment.block.banner</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\/\*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\*\/)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.line</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^\/\/ =(\s*.*?)\s*=$\n?</string>
					<key>name</key>
					<string>comment.line.banner</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>((?:^[ \t]+)?)(?=\/\/)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(\/\/)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\n)</string>
							<key>name</key>
							<string>comment.line.double-slash</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#line_continuation_character</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>contract_innards</key>
		<dict>
			<key>begin</key>
			<string>(ensures|requires|loop_invariant|assert)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.contract</string>
				</dict>
			</dict>
			<key>end</key>
			<string>([;]?[
]?)</string>
			<key>name</key>
			<string>meta.contract.line</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(;\
)</string>
					<key>name:</key>
					<string>punctuation.separator.continuation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block_innards</string>
				</dict>
			</array>
		</dict>
		<key>evalutation_context</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-call-innards</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>function-call-innards</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#storage_types</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method_access</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#member_access</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operators</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
(?!(?:while|for|do|if|else|return|alloc|alloc_array|assert)\s*\()
(
(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name
|
(?:(?&lt;=operator)(?:[-*&amp;&lt;&gt;=+!]+|\(\)|\[\]))
)
\s*(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.arguments.begin.bracket.round</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.arguments.end.bracket.round</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-call-innards</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.parens.begin.bracket.round</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.parens.end.bracket.round</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-call-innards</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#block_innards</string>
				</dict>
			</array>
		</dict>
		<key>function-innards</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#storage_types</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#vararg_ellipses</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
(?!(?:while|for|do|if|else|alloc|alloc_array)\s*\()
(
(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name
|
(?:(?&lt;=operator)(?:[-*&amp;&lt;&gt;=+!]+|\(\)|\[\]))
)
\s*(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.parameters.begin.bracket.round</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.parameters.end.bracket.round</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.definition.parameters</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#probably_a_parameter</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#function-innards</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.parens.begin.bracket.round</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.parens.end.bracket.round</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-innards</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>inline_comment</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment.block punctuation.definition.comment.begin</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>comment.block</string>
				</dict>
				<key>3</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\*\/</string>
							<key>name</key>
							<string>comment.block punctuation.definition.comment.end</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\*</string>
							<key>name</key>
							<string>comment.block</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>match</key>
			<string>(\/\*)((?&gt;(?:[^\*]|(?&gt;\*+)[^\/])*)((?&gt;\*+)\/))</string>
		</dict>
		<key>line_continuation_character</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.line-continuation</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\\)\n</string>
				</dict>
			</array>
		</dict>
		<key>member_access</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.object.access</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.dot-access</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.pointer-access</string>
				</dict>
				<key>4</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#member_access</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#method_access</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.other.object.access</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.dot-access</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.pointer-access</string>
								</dict>
							</dict>
							<key>match</key>
							<string>((?:[a-zA-Z_]\w*|(?&lt;=\]|\)))\s*)(?:((?:\.\*|\.))|((?:-&gt;\*|-&gt;)))</string>
						</dict>
					</array>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>variable.other.member</string>
				</dict>
			</dict>
			<key>match</key>
			<string>((?:[a-zA-Z_]\w*|(?&lt;=\]|\)))\s*)(?:((?:\.\*|\.))|((?:-&gt;\*|-&gt;)))((?:[a-zA-Z_]\w*\s*(?:(?:(?:\.\*|\.))|(?:(?:-&gt;\*|-&gt;)))\s*)*)\s*(\b(?!(?:void|char|string|int|bool)\b)[a-zA-Z_]\w*\b(?!\())</string>
		</dict>
		<key>method_access</key>
		<dict>
			<key>begin</key>
			<string>((?:[a-zA-Z_]\w*|(?&lt;=\]|\)))\s*)(?:((?:\.\*|\.))|((?:-&gt;\*|-&gt;)))((?:[a-zA-Z_]\w*\s*(?:(?:(?:\.\*|\.))|(?:(?:-&gt;\*|-&gt;)))\s*)*)\s*([a-zA-Z_]\w*)(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.object.access</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.dot-access</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.pointer-access</string>
				</dict>
				<key>4</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#member_access</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#method_access</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.other.object.access</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.dot-access</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.pointer-access</string>
								</dict>
							</dict>
							<key>match</key>
							<string>((?:[a-zA-Z_]\w*|(?&lt;=\]|\)))\s*)(?:((?:\.\*|\.))|((?:-&gt;\*|-&gt;)))</string>
						</dict>
					</array>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.member</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.arguments.begin.bracket.round.function.member</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.function-call.member</string>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.arguments.end.bracket.round.function.member</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-call-innards</string>
				</dict>
			</array>
		</dict>
		<key>numbers</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?=.)</string>
							<key>end</key>
							<string>$</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.other.unit.hexadecimal</string>
										</dict>
										<key>10</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.minus.exponent.hexadecimal</string>
										</dict>
										<key>11</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.exponent.hexadecimal</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>match</key>
													<string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
													<key>name</key>
													<string>punctuation.separator.constant.numeric</string>
												</dict>
											</array>
										</dict>
										<key>12</key>
										<dict>
											<key>name</key>
											<string>keyword.other.unit.suffix.floating-point</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.hexadecimal</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>match</key>
													<string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
													<key>name</key>
													<string>punctuation.separator.constant.numeric</string>
												</dict>
											</array>
										</dict>
										<key>3</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.constant.numeric</string>
										</dict>
										<key>4</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.hexadecimal</string>
										</dict>
										<key>5</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.hexadecimal</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>match</key>
													<string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
													<key>name</key>
													<string>punctuation.separator.constant.numeric</string>
												</dict>
											</array>
										</dict>
										<key>6</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.constant.numeric</string>
										</dict>
										<key>8</key>
										<dict>
											<key>name</key>
											<string>keyword.other.unit.exponent.hexadecimal</string>
										</dict>
										<key>9</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.plus.exponent.hexadecimal</string>
										</dict>
									</dict>
									<key>match</key>
									<string>(\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?&lt;=[0-9a-fA-F])\.|\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?&lt;!')([pP])(\+?)(\-?)((?:[0-9](?:[0-9]|(?:(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\w))?$</string>
								</dict>
								<dict>
									<key>captures</key>
									<dict>
										<key>10</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.minus.exponent.decimal</string>
										</dict>
										<key>11</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.exponent.decimal</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>match</key>
													<string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
													<key>name</key>
													<string>punctuation.separator.constant.numeric</string>
												</dict>
											</array>
										</dict>
										<key>12</key>
										<dict>
											<key>name</key>
											<string>keyword.other.unit.suffix.floating-point</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.decimal</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>match</key>
													<string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
													<key>name</key>
													<string>punctuation.separator.constant.numeric</string>
												</dict>
											</array>
										</dict>
										<key>3</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.constant.numeric</string>
										</dict>
										<key>4</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.decimal.point</string>
										</dict>
										<key>5</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.decimal</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>match</key>
													<string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
													<key>name</key>
													<string>punctuation.separator.constant.numeric</string>
												</dict>
											</array>
										</dict>
										<key>6</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.constant.numeric</string>
										</dict>
										<key>8</key>
										<dict>
											<key>name</key>
											<string>keyword.other.unit.exponent.decimal</string>
										</dict>
										<key>9</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.plus.exponent.decimal</string>
										</dict>
									</dict>
									<key>match</key>
									<string>(\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?&lt;=[0-9])\.|\.(?=[0-9])))([0-9](?:[0-9]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?&lt;!')([eE])(\+?)(\-?)((?:[0-9](?:[0-9]|(?:(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\w))?$</string>
								</dict>
								<dict>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.other.unit.binary</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.binary</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>match</key>
													<string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
													<key>name</key>
													<string>punctuation.separator.constant.numeric</string>
												</dict>
											</array>
										</dict>
										<key>3</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.constant.numeric</string>
										</dict>
										<key>4</key>
										<dict>
											<key>name</key>
											<string>keyword.other.unit.suffix.integer</string>
										</dict>
									</dict>
									<key>match</key>
									<string>(\G0[bB])([01](?:[01]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\w))?$</string>
								</dict>
								<dict>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.other.unit.octal</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.octal</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>match</key>
													<string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
													<key>name</key>
													<string>punctuation.separator.constant.numeric</string>
												</dict>
											</array>
										</dict>
										<key>3</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.constant.numeric</string>
										</dict>
										<key>4</key>
										<dict>
											<key>name</key>
											<string>keyword.other.unit.suffix.integer</string>
										</dict>
									</dict>
									<key>match</key>
									<string>(\G0)((?:[0-7]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\w))?$</string>
								</dict>
								<dict>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.other.unit.hexadecimal</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.hexadecimal</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>match</key>
													<string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
													<key>name</key>
													<string>punctuation.separator.constant.numeric</string>
												</dict>
											</array>
										</dict>
										<key>3</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.constant.numeric</string>
										</dict>
										<key>5</key>
										<dict>
											<key>name</key>
											<string>keyword.other.unit.exponent.hexadecimal</string>
										</dict>
										<key>6</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.plus.exponent.hexadecimal</string>
										</dict>
										<key>7</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.minus.exponent.hexadecimal</string>
										</dict>
										<key>8</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.exponent.hexadecimal</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>match</key>
													<string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
													<key>name</key>
													<string>punctuation.separator.constant.numeric</string>
												</dict>
											</array>
										</dict>
										<key>9</key>
										<dict>
											<key>name</key>
											<string>keyword.other.unit.suffix.integer</string>
										</dict>
									</dict>
									<key>match</key>
									<string>(\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?&lt;!')([pP])(\+?)(\-?)((?:[0-9](?:[0-9]|(?:(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\w))?$</string>
								</dict>
								<dict>
									<key>captures</key>
									<dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.decimal</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>match</key>
													<string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
													<key>name</key>
													<string>punctuation.separator.constant.numeric</string>
												</dict>
											</array>
										</dict>
										<key>3</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.constant.numeric</string>
										</dict>
										<key>5</key>
										<dict>
											<key>name</key>
											<string>keyword.other.unit.exponent.decimal</string>
										</dict>
										<key>6</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.plus.exponent.decimal</string>
										</dict>
										<key>7</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.minus.exponent.decimal</string>
										</dict>
										<key>8</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.exponent.decimal</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>match</key>
													<string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
													<key>name</key>
													<string>punctuation.separator.constant.numeric</string>
												</dict>
											</array>
										</dict>
										<key>9</key>
										<dict>
											<key>name</key>
											<string>keyword.other.unit.suffix.integer</string>
										</dict>
									</dict>
									<key>match</key>
									<string>(\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?&lt;!')([eE])(\+?)(\-?)((?:[0-9](?:[0-9]|(?:(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\w))?$</string>
								</dict>
								<dict>
									<key>match</key>
									<string>(?:(?:[0-9a-zA-Z_\.]|')|(?&lt;=[eEpP])[+-])+</string>
									<key>name</key>
									<string>invalid.illegal.constant.numeric</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</dict>
			<key>match</key>
			<string>(?&lt;!\w)\.?\d(?:(?:[0-9a-zA-Z_\.]|')|(?&lt;=[eEpP])[+-])*</string>
		</dict>
		<key>operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>--</string>
					<key>name</key>
					<string>keyword.operator.decrement</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\+\+</string>
					<key>name</key>
					<string>keyword.operator.increment</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%=|\+=|-=|\*=|(?&lt;!\()/=</string>
					<key>name</key>
					<string>keyword.operator.assignment.compound</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&amp;=|\^=|&lt;&lt;=|&gt;&gt;=|\|=</string>
					<key>name</key>
					<string>keyword.operator.assignment.compound.bitwise</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&lt;&lt;|&gt;&gt;</string>
					<key>name</key>
					<string>keyword.operator.bitwise.shift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>!=|&lt;=|&gt;=|==|&lt;|&gt;</string>
					<key>name</key>
					<string>keyword.operator.comparison</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&amp;&amp;|!|\|\|</string>
					<key>name</key>
					<string>keyword.operator.logical</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&amp;|\||\^|~</string>
					<key>name</key>
					<string>keyword.operator</string>
				</dict>
				<dict>
					<key>match</key>
					<string>=</string>
					<key>name</key>
					<string>keyword.operator.assignment</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%|\*|/|-|\+</string>
					<key>name</key>
					<string>keyword.operator</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\?)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.ternary</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(:)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.ternary</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-call-innards</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$base</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>parens</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.parens.begin.bracket.round</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.parens.end.bracket.round</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parens</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>parens-block</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.parens.begin.bracket.round</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.parens.end.bracket.round</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parens.block</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block_innards</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?-mix:(?&lt;!:):(?!:))</string>
					<key>name</key>
					<string>punctuation.range-based</string>
				</dict>
			</array>
		</dict>
		<key>probably_a_parameter</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.probably</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?&lt;=(?:[a-zA-Z_0-9] |[&amp;*&gt;\]\)]))\s*([a-zA-Z_]\w*)\s*(?=(?:\[\]\s*)?(?:,|\)))</string>
		</dict>
		<key>static_assert</key>
		<dict>
			<key>begin</key>
			<string>((?:(?:(?&gt;\s+)|(\/\*)((?&gt;(?:[^\*]|(?&gt;\*+)[^\/])*)((?&gt;\*+)\/)))+?|(?:(?:(?:(?:\b|(?&lt;=\W))|(?=\W))|\A)|\Z)))((?&lt;!\w)static_assert|_Static_assert(?!\w))((?:(?:(?&gt;\s+)|(\/\*)((?&gt;(?:[^\*]|(?&gt;\*+)[^\/])*)((?&gt;\*+)\/)))+?|(?:(?:(?:(?:\b|(?&lt;=\W))|(?=\W))|\A)|\Z)))(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#inline_comment</string>
						</dict>
					</array>
				</dict>
				<key>10</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.arguments.begin.bracket.round.static_assert</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>comment.block punctuation.definition.comment.begin</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>comment.block</string>
				</dict>
				<key>4</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\*\/</string>
							<key>name</key>
							<string>comment.block punctuation.definition.comment.end</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\*</string>
							<key>name</key>
							<string>comment.block</string>
						</dict>
					</array>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>keyword.other.static_assert</string>
				</dict>
				<key>6</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#inline_comment</string>
						</dict>
					</array>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>comment.block punctuation.definition.comment.begin</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>comment.block</string>
				</dict>
				<key>9</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\*\/</string>
							<key>name</key>
							<string>comment.block punctuation.definition.comment.end</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\*</string>
							<key>name</key>
							<string>comment.block</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.arguments.end.bracket.round.static_assert</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(,)\s*(?=(?:L|u8|u|U\s*\")?)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.delimiter.comma</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\))</string>
					<key>name</key>
					<string>meta.static_assert.message</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_context</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#evaluation_context</string>
				</dict>
			</array>
		</dict>
		<key>storage_types</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?-mix:(?&lt;!\w)(?:void|char|string|int|bool)(?!\w))</string>
					<key>name</key>
					<string>storage.type.built-in.primitive</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?-mix:\b(struct)\b)</string>
					<key>name</key>
					<string>storage.type.$1</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\b(?:__asm__|asm)\b)\s*((?:volatile)?)\s*(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.asm</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.modifier</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.parens.begin.bracket.round.assembly</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.parens.end.bracket.round.assembly</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.asm</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(R?)(")</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.encoding</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.begin.assembly</string>
								</dict>
							</dict>
							<key>contentName</key>
							<string>meta.embedded.assembly</string>
							<key>end</key>
							<string>(")</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.end.assembly</string>
								</dict>
							</dict>
							<key>name</key>
							<string>string.quoted.double</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>source.asm</string>
								</dict>
								<dict>
									<key>include</key>
									<string>source.x86</string>
								</dict>
								<dict>
									<key>include</key>
									<string>source.x86_64</string>
								</dict>
								<dict>
									<key>include</key>
									<string>source.arm</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#backslash_escapes</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#string_escaped_char</string>
								</dict>
								<dict>
									<key>match</key>
									<string>(?=not)possible</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(\()</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.parens.begin.bracket.round.assembly.inner</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(\))</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.parens.end.bracket.round.assembly.inner</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#evaluation_context</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>match</key>
							<string>:</string>
							<key>name</key>
							<string>punctuation.separator.delimiter.colon.assembly</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments_context</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)\\ (
\\			 |
[abefnprtv'"?]   |
[0-3]\d{,2}	 |
[4-7]\d?		|
x[a-fA-F0-9]{,2} |
u[a-fA-F0-9]{,4} |
U[a-fA-F0-9]{,8} )</string>
					<key>name</key>
					<string>constant.character.escape</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unknown-escape</string>
				</dict>
			</array>
		</dict>
		<key>string_placeholder</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x) %
(\d+\$)?						   # field (argument #)
[#0\- +']*						  # flags
[,;:_]?							  # separator character (AltiVec)
((-?\d+)|\*(-?\d+\$)?)?		  # minimum field width
(\.((-?\d+)|\*(-?\d+\$)?)?)?	# precision
(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
[diouxXDOUeEfFgGaACcSspn%]		   # conversion type</string>
					<key>name</key>
					<string>constant.other.placeholder</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.placeholder</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(%)(?!"\s*(PRI|SCN))</string>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#line_continuation_character</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#line_continuation_character</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.c0</string>
	<key>uuid</key>
	<string>0AC5AF3B-51D2-4712-A6FD-8A232B6DA823</string>
</dict>
</plist>
